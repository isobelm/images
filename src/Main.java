import javax.swing.*;import javax.swing.filechooser.FileFilter;import java.awt.*;import java.awt.image.BufferedImage;import java.io.File;import java.io.IOException;import javax.imageio.ImageIO;public class Main{    private static final Color BACKGROUND = new Color(0x283E32);    private static final Color WHITE = new Color(0xFFFFFF);    private static final int BORDER = 30, MIN_DIST = 1, MAX_DIST = 6, DEFAULT_DIST = 2, MIN_STRENGTH = 0, MAX_STRENGTH = 30, DEFAULT_STRENGTH = 0;    private static final int DEFAULT_THRESHOLD = 30, MIN_THRESHOLD = 5, MAX_THRESHOLD = 105;    private static JFrame frame;    private static JFrame display;    private static JPanel startPanel, edgeScreen, blockScreen, polygonScreen;    private static DisplayPanel displayPanel;    private static BufferedImage image;    private static BufferedImage outImg;    private static int dist, strength, threshold;    private static final String EDGE_SCREEN = "Edge Detection", BLOCK_SCREEN = "Blocking", START_SCREEN = "Start", BACK = "Back";    public static void main(String[] args)    {        image = null;        outImg = null;        frame = new JFrame("Images");        setUpDisplay();        initScreens();    }    private static void setUpDisplay()    {        displayPanel = new DisplayPanel(null, frame);        display = new JFrame();        display.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);        display.setVisible(true);        display.add(displayPanel);        display.setContentPane(displayPanel);//        display.setLayout(new BoxLayout(display,  BoxLayout.Y_AXIS));        display.setSize(500, 500);    }    private static void initScreens()    {        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);        //panels        startPanel = new JPanel();        formatPanel(startPanel);        frame.setContentPane(startPanel);        edgeScreen = new JPanel();        formatPanel(edgeScreen);        blockScreen = new JPanel();        formatPanel(blockScreen);        polygonScreen = new JPanel();        formatPanel(polygonScreen);        startPanel();        edgeScreen();        blockScreen();        polygonScreen();        frame.pack();        frame.revalidate();        frame.repaint();        frame.setVisible(true);    }    private static void addDist(JPanel screen)    {        //dist        JSlider distField = new JSlider(JSlider.HORIZONTAL, MIN_DIST, MAX_DIST, DEFAULT_DIST);        JLabel distLabel = new JLabel("Edge Size: ");        distLabel.setForeground(WHITE);        dist = DEFAULT_DIST;        distField.addChangeListener(e -> dist = distField.getValue());        distField.setSnapToTicks(true);        screen.add(distLabel);        screen.add(distField);    }    private static void addProcessButton(JPanel screen)    {        Button process = new Button("Process Image");        screen.add(process);        process.addActionListener(e ->        {            if (image != null)            {                outImg = ImageProcesses.edgeColours(image, dist, strength);                updateDisplay(outImg);            }        });    }    private static void addThresholdButton(JPanel screen)    {        Button thresholdButton = new Button("Threshold");        screen.add(thresholdButton);        thresholdButton.addActionListener(e ->        {            if (outImg != null)            {                outImg = ImageProcesses.threshold(outImg, threshold);                updateDisplay(outImg);            }        });    }    private static void polygonScreen()    {        polygonScreen.add(chooseImageButton());        addDist(polygonScreen);        //strength//        JSlider strengthField = new JSlider(JSlider.HORIZONTAL, MIN_STRENGTH, MAX_STRENGTH, DEFAULT_STRENGTH);//        JLabel strengthLabel = new JLabel("Strength: ");//        strengthLabel.setForeground(WHITE);//        strength = DEFAULT_STRENGTH;//        strengthField.addChangeListener(e -> strength = strengthField.getValue());//        strengthField.setSnapToTicks(true);//        edgeScreen.add(strengthLabel);//        edgeScreen.add(strengthField);        polygonScreen.add(thresholdLabel());        polygonScreen.add(thresholdSlider());        addProcessButton(polygonScreen);        addThresholdButton(polygonScreen);        //Poly        Button line = new Button("Polygons");        polygonScreen.add(line);        line.addActionListener(e ->        {            if (outImg != null)            {                outImg = ImageProcesses.imgToPointsAndEdges(outImg);                updateDisplay(outImg);            }        });        polygonScreen.add(savejpgButton());        polygonScreen.add(savepngButton());        polygonScreen.add(backButton());    }    private static void blockScreen()    {        //choose image        blockScreen.add(chooseImageButton());        //threshold        blockScreen.add(thresholdLabel());        blockScreen.add(thresholdSlider());        //block        Button block = new Button("Block Image");        blockScreen.add(block);        block.addActionListener(e ->        {            if (image != null)            {                outImg = ImageProcesses.block(image, threshold);                updateDisplay(outImg);            }        });        //save        blockScreen.add(savejpgButton());        blockScreen.add(savepngButton());        blockScreen.add(backButton());    }    private static void edgeScreen()    {        edgeScreen.add(chooseImageButton());        addDist(edgeScreen);        //strength        JSlider strengthField = new JSlider(JSlider.HORIZONTAL, MIN_STRENGTH, MAX_STRENGTH, DEFAULT_STRENGTH);        JLabel strengthLabel = new JLabel("Strength: ");        strengthLabel.setForeground(WHITE);        strength = DEFAULT_STRENGTH;        strengthField.addChangeListener(e -> strength = strengthField.getValue());        strengthField.setSnapToTicks(true);        edgeScreen.add(strengthLabel);        edgeScreen.add(strengthField);        edgeScreen.add(thresholdLabel());        edgeScreen.add(thresholdSlider());        addProcessButton(edgeScreen);        //threshold        addThresholdButton(edgeScreen);        //invert        Button invert = new Button("Invert");        edgeScreen.add(invert);        invert.addActionListener(e ->        {            if (outImg != null)            {                ImageProcesses.invert(outImg);                updateDisplay(outImg);            }        });        edgeScreen.add(savejpgButton());        edgeScreen.add(savepngButton());        edgeScreen.add(backButton());    }    private static void startPanel()    {        startPanel.add(chooseImageButton());        //screen select        Button edgeScreenButton = new Button(EDGE_SCREEN);        startPanel.add(edgeScreenButton);        edgeScreenButton.addActionListener(e -> {            screenSelectListener(edgeScreen);        });        Button blockScreenButton = new Button(BLOCK_SCREEN);        startPanel.add(blockScreenButton);        blockScreenButton.addActionListener(e ->        {            screenSelectListener(blockScreen);        });        Button polygonButton = new Button("Polygons - Unfinished");        startPanel.add(polygonButton);        polygonButton.addActionListener(e ->        {            screenSelectListener(polygonScreen);        });    }    private static void updateDisplay(BufferedImage img)    {        displayPanel.setImage(img, display.getGraphics());        display.revalidate();        display.repaint();    }    private static void screenSelectListener(JPanel panel)    {        frame.setContentPane(panel);        frame.revalidate();        frame.repaint();        frame.pack();    }    private static Button chooseImageButton()    {        Button choose = new Button("Choose Image");        choose.addActionListener(e ->        {            BufferedImage tmp = Main.getImage();            if (tmp != null)            {                image = tmp;                updateDisplay(image);            }        });        return choose;    }    private static JSlider thresholdSlider()    {        JSlider thresholdField = new JSlider(JSlider.HORIZONTAL, MIN_THRESHOLD, MAX_THRESHOLD, DEFAULT_THRESHOLD);        threshold = DEFAULT_THRESHOLD;        thresholdField.addChangeListener(e -> threshold = thresholdField.getValue());        thresholdField.setSnapToTicks(true);        return thresholdField;    }    private static JLabel thresholdLabel()    {        JLabel thresholdLabel = new JLabel("Threshold: ");        thresholdLabel.setForeground(WHITE);        return thresholdLabel;    }    private static Button backButton()    {        Button back = new Button(BACK);        back.addActionListener(e -> {            frame.setContentPane(startPanel);            frame.pack();        });        return back;    }    private static Button savejpgButton()    {        Button saveJpg = new Button("Save as .jpg");        saveJpg.addActionListener(e ->        {            if (outImg != null)            {                saveImage("jpg");            }        });        return saveJpg;    }    private static Button savepngButton()    {        Button savePng = new Button("Save as .png");        savePng.addActionListener(e ->        {            if (outImg != null)            {                saveImage("png");            }        });        return savePng;    }    private static BufferedImage getImage()    {        boolean imageAccepted;        BufferedImage image = null;        do        {            imageAccepted = true;            JFileChooser fileChooser = new JFileChooser();            FileFilter fileFilter = new ImageFilter();            fileChooser.setFileFilter(fileFilter);            fileChooser.setMultiSelectionEnabled(false);            fileChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);            fileChooser.showOpenDialog(frame);            File file = fileChooser.getSelectedFile();            try            {                if (file != null)                {                    image = ImageIO.read(file);                }            }            catch (java.io.IOException e)            {                imageAccepted = false;            }        } while (!imageAccepted);        return image;    }    private static void saveImage(String format)    {        JFileChooser fileChooser = new JFileChooser();        fileChooser.setMultiSelectionEnabled(false);        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);        fileChooser.showSaveDialog(frame);        File file = fileChooser.getSelectedFile();        try {            if (file != null)            {                String path = file.getAbsolutePath();                //Slightly convoluted check for presence of file extension                if (!(new ImageFilter().accept(file)))                {                    path = file.getAbsolutePath() + "." + format;                }                File outputFile = new File(path);                ImageIO.write(outImg, format, outputFile);            }        } catch (IOException e) {            System.out.println("Fail");        }    }    private static void formatPanel(JPanel panel)    {        panel.setBackground(BACKGROUND);        panel.setBorder(BorderFactory.createEmptyBorder(BORDER, BORDER, BORDER, BORDER));        panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));        panel.setOpaque(true);    }}